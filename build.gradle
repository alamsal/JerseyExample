/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'ryozi' at '14/09/07 14:57' with Gradle 1.12
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.12/userguide/tutorial_java_projects.html
 */

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'eclipse'

// setting

version = '0.01'

sourceCompatibility = 1.7
targetCompatibility = 1.7

def lancherName = 'myapp.example.main.Lancher'

compileJava.options.compilerArgs = ["-target", targetCompatibility, "-source", sourceCompatibility]

// tasks

repositories {
    mavenCentral()
}


tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

dependencies {
	// if JAX-RS-library is not include in your container, change setting from "providedCompile" to "compile"
	providedCompile 'javax.ws.rs:javax.ws.rs-api:2.0.1'

	// Jersey Libraries
	compile 'org.glassfish.jersey.core:jersey-server:2.12'
	compile 'org.glassfish.jersey.core:jersey-common:2.12'
	compile 'org.glassfish.jersey.core:jersey-client:2.12'
	compile 'org.glassfish.jersey.containers:jersey-container-servlet-core:2.12'

	// Test Libraries
	testCompile 'junit:junit:4.11'
	testCompile 'org.glassfish.jersey.test-framework:jersey-test-framework-core:2.12'
	testCompile 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-inmemory:2.12'

	// Jetty Libraries. It is used to create an executable war
	providedCompile 'javax.servlet:servlet-api:2.5'
	providedCompile 'org.eclipse.jetty:jetty-server:9.2.2.v20140723'
	providedCompile 'org.eclipse.jetty:jetty-servlet:9.2.2.v20140723'
	providedCompile 'org.eclipse.jetty:jetty-webapp:9.2.2.v20140723'
	providedCompile 'org.eclipse.jetty:jetty-http:9.2.2.v20140723'
}

war {
	// none...
}

task executableWar (type: War) {
	appendix = "executable"

	from fileTree('build/classes/main').include(lancherName.replace('.', '/') + ".class");

	// include jetty libraries.
	from configurations.providedCompile.filter {
		it.isFile() && it.name.endsWith(".jar") && (it.name.contains("jetty") || it.name.contains("servlet-api"))
	}.collect {
		zipTree(it).matching{
			include	"org/eclipse/jetty/**/*"
			include "javax/servlet/**/*"
		}
	}

	// include jax-rs libraries. jetty has not JAX-RS Library.
	classpath configurations.providedCompile.filter {
		it.isFile() && it.name.endsWith(".jar") && (it.name.contains("javax.ws.rs-api"))
	}

	manifest {
		attributes 'version': "$version"
		attributes 'Main-Class': "$lancherName"
		attributes 'Class-Path': "."
	}
}

